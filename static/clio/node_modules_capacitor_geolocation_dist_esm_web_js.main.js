"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkreact_webpack_setup"] = self["webpackChunkreact_webpack_setup"] || []).push([["node_modules_capacitor_geolocation_dist_esm_web_js"],{

/***/ "./node_modules/@capacitor/geolocation/dist/esm/web.js":
/*!*************************************************************!*\
  !*** ./node_modules/@capacitor/geolocation/dist/esm/web.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Geolocation: () => (/* binding */ Geolocation),\n/* harmony export */   GeolocationWeb: () => (/* binding */ GeolocationWeb)\n/* harmony export */ });\n/* harmony import */ var _capacitor_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @capacitor/core */ \"./node_modules/@capacitor/core/dist/index.js\");\n\nclass GeolocationWeb extends _capacitor_core__WEBPACK_IMPORTED_MODULE_0__.WebPlugin {\n    async getCurrentPosition(options) {\n        return new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition((pos) => {\n                resolve(pos);\n            }, (err) => {\n                reject(err);\n            }, Object.assign({ enableHighAccuracy: false, timeout: 10000, maximumAge: 0 }, options));\n        });\n    }\n    async watchPosition(options, callback) {\n        const id = navigator.geolocation.watchPosition((pos) => {\n            callback(pos);\n        }, (err) => {\n            callback(null, err);\n        }, Object.assign({ enableHighAccuracy: false, timeout: 10000, maximumAge: 0, minimumUpdateInterval: 5000 }, options));\n        return `${id}`;\n    }\n    async clearWatch(options) {\n        navigator.geolocation.clearWatch(parseInt(options.id, 10));\n    }\n    async checkPermissions() {\n        if (typeof navigator === 'undefined' || !navigator.permissions) {\n            throw this.unavailable('Permissions API not available in this browser');\n        }\n        const permission = await navigator.permissions.query({\n            name: 'geolocation',\n        });\n        return { location: permission.state, coarseLocation: permission.state };\n    }\n    async requestPermissions() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\nconst Geolocation = new GeolocationWeb();\n\n//# sourceMappingURL=web.js.map\n\n//# sourceURL=webpack://react-webpack-setup/./node_modules/@capacitor/geolocation/dist/esm/web.js?");

/***/ })

}]);
